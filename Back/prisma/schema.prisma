// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String
  email    String   @unique
  password String
  isAdmin  Boolean  @default(false)
  // Ajoutez d'autres champs utilisateur si nécessaire

  // Relation OneToMany avec les réservations
  reservations Reservation[]
}

model Reservation {
  id           Int      @id @default(autoincrement())
  checkInDate DateTime
  checkOutDate DateTime
  // Ajoutez d'autres champs de réservation si nécessaire

  // Relation ManyToOne avec l'utilisateur
  userId       Int
  user         User     @relation(fields: [userId], references: [id])

  // Relation ManyToMany avec les options
  //options      Option[]
  // Relation OneToOne avec le logement
  //lodging      Lodging? @relation(fields: [lodgingId], references: [id])
  //lodgingId    Int? @unique
}

model Color {
  id    String @id
  name  String @unique
  hex   String @default("#FFFFFF")
  // Ajoutez d'autres champs de couleur si nécessaire

  // Relation OneToMany avec les logements
  lodgings Lodging[]
}

model Option {
  id    String @id
  name  String @unique
  isActive Boolean @default(false)
  // Ajoutez d'autres champs d'option si nécessaire

  // Relation ManyToMany avec les réservations
  //reservations Reservation[]
  //lodgings OptionsInLodgings[]
  lodgings Lodging[]

}

model Lodging {
  id        Int      @id @default(autoincrement())
  name      String?
  // Ajoutez d'autres champs de logement si nécessaire

  // Relation OneToOne avec la réservation
  //reservation Reservation?

  // Relation ManyToMany avec les options
  // options OptionsInLodgings[]
  options Option[]

  // Relation ManyToOne avec la couleur
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])

}

//model OptionsInLodgings {
//  lodging       Lodging     @relation(fields: [lodgingId], references: [id])
//  lodgingId     Int // relation scalar field (used in the `@relation` attribute above)
//  option        Option @relation(fields: [optionId], references: [id])
//  optionId      Int // relation scalar field (used in the `@relation` attribute above)
//  assignedAt DateTime @default(now())
//  assignedBy String

// @@id([lodgingId, optionId])
//}
